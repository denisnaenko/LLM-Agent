import app.keyboards as kb
import app.database.requests as rq
import os

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from .helpers.skin_test import determine_skin_type
from .services.cropper import crop_object_async
from .services.find_func import analyze_ingredients
from .helpers.ingredient_invalidation import is_valid_ingredients_text

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
class UploadPhotoState(StatesGroup):
    waiting_for_photo = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
class TextInputState(StatesGroup):
    waiting_for_text = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞ –Ω–∞ —Ç–∏–ø –∫–æ–∂–∏
class SkinTypeTest(StatesGroup):
    question_1 = State()
    question_2 = State()
    question_3 = State()
    question_4 = State()
    question_5 = State()
    question_6 = State()
    question_7 = State()
    question_8 = State()
    question_9 = State()
    question_10 = State()
    question_11 = State()
    question_12 = State()
    question_13 = State()
    calculating_result = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç! –Ø - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π –ª–∏—Ü–∞.\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∏—Ö —Å–æ—Å—Ç–∞–≤–µ, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥–±–µ—Ä—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π.\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
                         reply_markup=kb.main_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–∏ "–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑"
@router.message(lambda message: message.text == "–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑")
async def start_analysis(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–∞–≤–∞:", reply_markup=kb.analysis_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–∏ "–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑" -> "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞"
@router.callback_query(lambda c: c.data == "upload_photo")
async def upload_photo(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    await state.set_state(UploadPhotoState.waiting_for_photo)
    await callback.answer()

# [SUB] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'waiting_for_photo'
@router.message(UploadPhotoState.waiting_for_photo, F.photo)
async def handle_photo(message: Message, state: FSMContext):
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo = message.photo[-1]   # –±–µ—Ä—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è

    file = await message.bot.get_file(photo.file_id)
    file_path = file.file_path

    destination = f"downloads/{photo.file_id}.jpg"
    os.makedirs("downloads", exist_ok=True)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
    await message.bot.download_file(file_path, destination)
    # –û–±—Ä–µ–∑–∞–µ–º —Ñ–æ—Ç–æ
    crooper_res, cropper_msg = await crop_object_async(destination)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏—Å—Ö–æ–¥ –æ–±—Ä–µ–∑–∫–∏ —Ñ–æ—Ç–æ
    await message.answer(cropper_msg)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å —Ñ–æ—Ç–æ
    if crooper_res:
        product_conclusion = await analyze_ingredients()

    await message.answer(product_conclusion)

    os.remove(destination)  # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await state.clear()
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–∏ "–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑" -> "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥"
@router.callback_query(lambda c: c.data == "text_input")
async def text_input(callback: CallbackQuery, state: FSMContext):    
    await state.clear()
    await state.set_state(TextInputState.waiting_for_text)
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ –≤–∞—à–µ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    await callback.answer()

# [SUB] –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∞–Ω–∞–ª–∏–∑
@router.message(TextInputState.waiting_for_text)
async def handle_text_input(message: Message, state: FSMContext):
    
    user_text = message.text
    if await handle_other_commands(message, state): return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞
    is_valid, validation_message = await is_valid_ingredients_text(user_text)

    if not is_valid:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ
        await message.answer(f"{validation_message}\n\n"
                             f"üîÅ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–∞–∫ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã –≤ —Å–æ—Å—Ç–∞–≤–µ, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        
        await state.clear()
        await state.set_state(TextInputState.waiting_for_text)
        return
    
    # –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞
    result = await analyze_ingredients(user_text)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(result)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–∏ "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
@router.message(lambda message: message.text == "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
async def personal_rec(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:", reply_markup=kb.personal_rec_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–∏ "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" -> "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ç–∏–ø –∫–æ–∂–∏"
# [SUB] –í–æ–ø—Ä–æ—Å 1:
@router.callback_query(lambda c: c.data == "get_skin_type")
async def get_skin_type(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Ç–∏–ø –∫–æ–∂–∏ –∏ –µ—ë –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
    await callback.message.answer("–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫–∏–µ –æ—â—É—â–µ–Ω–∏—è –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∞ –∫–æ–∂–∞ –ø–æ—Å–ª–µ —É–º—ã–≤–∞–Ω–∏—è?\n\nA) –î–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∫–æ–∂–∞ —Å–≤–µ–∂–∞—è, —Å–∏—è—é—â–∞—è.\n\nB) –ü–æ—è–≤–ª—è–µ—Ç—Å—è —á—É–≤—Å—Ç–≤–æ —Å—Ç—è–Ω—É—Ç–æ—Å—Ç–∏, —Å—É—Ö–æ—Å—Ç—å, –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç.\n\nC) –£–∂–µ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —É–º—ã–≤–∞–Ω–∏—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –∂–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫ –ª–∏—Ü–∞.\n\nD) –ü–æ—Å–ª–µ —É–º—ã–≤–∞–Ω–∏—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è —á—Ä–µ–∑–º–µ—Ä–Ω—ã–π –±–ª–µ—Å–∫ –ª–∏—Ü–∞ –≤ –¢-–∑–æ–Ω–µ, –æ–±–ª–∞—Å—Ç—å —â–µ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –º–∞—Ç–æ–≤–æ–π.",
                                  reply_markup=kb.response_4_options)
    await state.set_state(SkinTypeTest.question_1)    

# [SUB] –í–æ–ø—Ä–æ—Å 2:
@router.callback_query(SkinTypeTest.question_1)
async def handle_question_1(callback: CallbackQuery, state: FSMContext):
    await state.update_data(answer_1=callback.data)
    await callback.message.answer("–í–æ–ø—Ä–æ—Å 2: –ö–∞–∫–∏–µ –æ—â—É—â–µ–Ω–∏—è –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç –∫–æ–∂–∞, –µ—Å–ª–∏ –ø—Ä–µ–Ω–µ–±—Ä–µ—á—å —ç—Ç–∞–ø–æ–º –µ—ë —É–≤–ª–∞–∂–Ω–µ–Ω–∏—è?\n\nA) –ù–µ –∏—Å–ø–æ–ª—å–∑—É—é —É–≤–ª–∞–∂–Ω—è—é—â–∏–π –∫—Ä–µ–º, –±–µ–∑ –Ω–µ–≥–æ –∫–æ–∂–∞ —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –æ—Ç–ª–∏—á–Ω–æ.\n\nB) –£–≤–ª–∞–∂–Ω—è—é—â–∏–π –∫—Ä–µ–º - –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–π —ç—Ç–∞–ø –º–æ–µ–π –±—å—é—Ç–∏-—Ä—É—Ç–∏–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –±–µ–∑ –Ω–µ–≥–æ –∫–æ–∂–∞ —Å—É—Ö–∞—è –∏ —Å—Ç—è–Ω—É—Ç–∞—è.\n\n–°) –ë–µ–∑ —É–≤–ª–∞–∂–Ω–µ–Ω–∏—è –∂–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫ –ª–∏—Ü–∞ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è.\n\nD) –ë–µ–∑ —É–≤–ª–∞–∂–Ω–µ–Ω–∏—è –∂–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫ –ª–∏—Ü–∞ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è –≤ –¢-–∑–æ–Ω–µ, –æ–±–ª–∞—Å—Ç—å —â–µ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –º–∞—Ç–æ–≤–æ–π.",
                                  reply_markup=kb.response_4_options)
    await state.set_state(SkinTypeTest.question_2)

# [SUB] –í–æ–ø—Ä–æ—Å 3:
@router.callback_query(SkinTypeTest.question_2)
async def handle_question_2(callback: CallbackQuery, state: FSMContext):
    await state.update_data(answer_2=callback.data)
    await callback.message.answer("–í–æ–ø—Ä–æ—Å 3: –°–≤–æ–π—Å—Ç–≤–µ–Ω–µ–Ω –ª–∏ –¥–ª—è –≤–∞—à–µ–π –∫–æ–∂–∏ –∂–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫?\n\nA) –ù–µ—Ç, –∂–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n\nB) –õ—ë–≥–∫–∏–π –∂–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –∫ –∫–æ–Ω—Ü—É –¥–Ω—è.\n\nC) –î–∞, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –≤—Å–µ–º –ª–∏—Ü–µ.\n\nD) –ò–Ω–æ–≥–¥–∞ –∂–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –¢-–∑–æ–Ω–µ.",
                                  reply_markup=kb.response_4_options)
    await state.set_state(SkinTypeTest.question_3)

# [SUB] –í–æ–ø—Ä–æ—Å 4:
@router.callback_query(SkinTypeTest.question_3)
async def handle_question_3(callback: CallbackQuery, state: FSMContext):
    await state.update_data(answer_3=callback.data)
    await callback.message.answer("–í–æ–ø—Ä–æ—Å 4: –û—Ü–µ–Ω–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä –Ω–∞ –≤–∞—à–µ–º –ª–∏—Ü–µ\n\nA) –ü–æ—Ä—ã –Ω–µ–∑–∞–º–µ—Ç–Ω—ã, –≤—ã—Å—ã–ø–∞–Ω–∏—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è.\n\nB) –ü–æ—Ä—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–∑–∞–º–µ—Ç–Ω—ã, –≤—ã—Å—ã–ø–∞–Ω–∏—è –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ä–µ–¥–∫–æ.\n\nC) –ü–æ—Ä—ã –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ, –Ω–∞ –ª–∏—Ü–µ –∏–º–µ—é—Ç—Å—è –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞: –ø—Ä—ã—â–∏, —á–µ—Ä–Ω—ã–µ —Ç–æ—á–∫–∏, —Å—ã–ø—å.\n\nD) –ü–æ—Ä—ã —Ä–∞—Å—à–∏—Ä–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –æ–±–ª–∞—Å—Ç–∏ –ª–±–∞, –Ω–æ—Å–∞ –∏ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞. –í U-–∑–æ–Ω–µ –ø–æ—Ä –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∏ —Å–ª–∞–±–æ–∑–∞–º–µ—Ç–Ω—ã.",
                                  reply_markup=kb.response_4_options)
    await state.set_state(SkinTypeTest.question_4)

# [SUB] –í–æ–ø—Ä–æ—Å 5:
@router.callback_query(SkinTypeTest.question_4)
async def handle_question_4(callback: CallbackQuery, state: FSMContext):
    await state.update_data(answer_4=callback.data)
    await callback.message.answer("–í–æ–ø—Ä–æ—Å 5: –†–µ–∞–≥–∏—Ä—É–µ—Ç –ª–∏ –≤–∞—à–∞ –∫–æ–∂–∞ –Ω–∞ –≤–ª–∏—è–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ, –≤—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ (–∫—É—Ä–µ–Ω–∏–µ, —á—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è), –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã, —Å–º–µ–Ω–∞ –∫–ª–∏–º–∞—Ç–∞ –∏ –ø—Ä–æ—á–µ–µ?\n\nA) –ù–∏–∫–∞–∫ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç.\n\nB) –ü–æ—è–≤–ª—è–µ—Ç—Å—è —Å—É—Ö–æ—Å—Ç—å, —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ, –∑—É–¥.\n\nC) –ü–æ—è–≤–ª—è–µ—Ç—Å—è —á—Ä–µ–∑–º–µ—Ä–Ω—ã–π –∂–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫ –ª–∏—Ü–∞ –∏ –æ–±–æ—Å—Ç—Ä—è–µ—Ç—Å—è —Ç–µ—á–µ–Ω–∏–µ –∞–∫–Ω–µ.\n\nD) –ü–æ—è–≤–ª—è—é—Ç—Å—è –≤—ã—Å—ã–ø–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –ª–±–∞, –Ω–æ—Å–∞ –∏ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞.",
                                  reply_markup=kb.response_4_options)
    await state.set_state(SkinTypeTest.question_5)

# [SUB] –í–æ–ø—Ä–æ—Å 6:
@router.callback_query(SkinTypeTest.question_5)
async def handle_question_5(callback: CallbackQuery, state: FSMContext):
    await state.update_data(answer_5=callback.data)
    await callback.message.answer("–í–æ–ø—Ä–æ—Å 6: –ö–∞–∫ –≤–∞—à–∞ –∫–æ–∂–∞ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –Ω–∞ –º–æ—Ä–æ–∑–µ?\n\nA) –ü–æ—è–≤–ª—è–µ—Ç—Å—è —Ä—É–º—è–Ω–µ—Ü –∏–ª–∏ –ª–µ–≥–∫–æ–µ —à–µ–ª—É—à–µ–Ω–∏–µ.\n\nB) –ö–æ–∂–∞ –∫—Ä–∞—Å–Ω–µ–µ—Ç, –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å—É—Ö–æ—Å—Ç—å –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ.\n\nC) –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∂–∏—Ä–Ω–æ–≥–æ –±–ª–µ—Å–∫–∞.\n\nD) –ú–µ–Ω—å—à–µ –∂–∏—Ä–Ω–æ–≥–æ –±–ª–µ—Å–∫–∞ –≤ –¢-–∑–æ–Ω–µ; –Ω–∞ —â–µ–∫–∞—Ö –ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ—â—É—â–µ–Ω–∏–µ —Å—Ç—è–Ω—É—Ç–æ—Å—Ç–∏.",
                                  reply_markup=kb.response_4_options)
    await state.set_state(SkinTypeTest.question_6)

# [SUB] –í–æ–ø—Ä–æ—Å 7:
@router.callback_query(SkinTypeTest.question_6)
async def handle_question_6(callback: CallbackQuery, state: FSMContext):
    await state.update_data(answer_6=callback.data)
    await callback.message.answer("–í–æ–ø—Ä–æ—Å 7: –ö–∞–∫ –≤–∞—à–∞ –∫–æ–∂–∞ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∂–∞—Ä—É?\n\nA) –ü–æ—è–≤–ª—è–µ—Ç—Å—è –ª–µ–≥–∫–∏–π –±–ª–µ—Å–∫.\n\nB) –ù–∞ –∫–æ–∂–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è —à–µ–ª—É—à–µ–Ω–∏—è, –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è –∏–ª–∏ –∑—É–¥.\n\nC) –ñ–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫ —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ–º –ª–∏—Ü–µ.\n\nD) –ñ–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –¢-–∑–æ–Ω–µ.",
                                  reply_markup=kb.response_4_options)
    await state.set_state(SkinTypeTest.question_7)

# [SUB] –í–æ–ø—Ä–æ—Å 8:
@router.callback_query(SkinTypeTest.question_7)
async def handle_question_7(callback: CallbackQuery, state: FSMContext):
    await state.update_data(answer_7=callback.data)
    await callback.message.answer("–í–æ–ø—Ä–æ—Å 8: –ö–∞–∫ —á–∞—Å—Ç–æ —É –≤–∞—Å –ø–æ—è–≤–ª—è—é—Ç—Å—è –∞–∫–Ω–µ?\n\nA) –ù–∏–∫–æ–≥–¥–∞. –ù–∞ –º–æ–µ–π –∫–æ–∂–µ –Ω–µ—Ç –≤—ã—Å—ã–ø–∞–Ω–∏–π –∞–∫–Ω–µ.\n\nB) –ü–æ—è–≤–ª—è—é—Ç—Å—è –≤ –ø–µ—Ä–∏–æ–¥ –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏–∏.\n\nC) –ü–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –≤—Ä–µ–¥–Ω–æ–π –µ–¥—ã.\n\nD) –ü–æ—Å—Ç–æ—è–Ω–Ω–æ, –Ω–∞ –ª–∏—Ü–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –∞–∫–Ω–µ –∏ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è.",
                                  reply_markup=kb.response_4_options)
    await state.set_state(SkinTypeTest.question_8)

# [SUB] –í–æ–ø—Ä–æ—Å 9:
@router.callback_query(SkinTypeTest.question_8)
async def handle_question_8(callback: CallbackQuery, state: FSMContext):
    await state.update_data(answer_8=callback.data)
    await callback.message.answer("–í–æ–ø—Ä–æ—Å 9: –ï—Å—Ç—å –ª–∏ —É –í–∞—Å —Å–ª–µ–¥—ã –ø–æ—Å—Ç–∞–∫–Ω–µ?\n\nA) –î–∞, –µ—Å—Ç—å –ø—è—Ç–Ω–∞ –∏ —Ä—É–±—Ü—ã (—à—Ä–∞–º—ã –æ—Ç –ø—Ä—ã—â–µ–π).\n\nB) –ù–µ—Ç, –Ω–∞ –º–æ—ë–º –ª–∏—Ü–µ –Ω–µ—Ç —Å–ª–µ–¥–æ–≤ –ø–æ—Å—Ç–∞–∫–Ω–µ.",
                                  reply_markup=kb.response_2_options)
    await state.set_state(SkinTypeTest.question_9)

# [SUB] –í–æ–ø—Ä–æ—Å 10:
@router.callback_query(SkinTypeTest.question_9)
async def handle_question_9(callback: CallbackQuery, state: FSMContext):
    await state.update_data(answer_9=callback.data)
    await callback.message.answer("–í–æ–ø—Ä–æ—Å 10: –ó–∞–º–µ—Ç–Ω—ã –ª–∏ –Ω–∞ –í–∞—à–µ–º –ª–∏—Ü–µ –º–æ—Ä—â–∏–Ω—ã?\n\nA) –ù–µ—Ç, –Ω–∞ –º–æ—ë–º –ª–∏—Ü–µ –Ω–µ—Ç –º–æ—Ä—â–∏–Ω.\n\nB) –î–∞, –Ω–∞ –º–æ—ë–º –ª–∏—Ü–µ –µ—Å—Ç—å –ª—ë–≥–∫–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–µ –º–æ—Ä—â–∏–Ω–∫–∏.\n\nC) –î–∞, –Ω–∞ –º–æ—ë–º –ª–∏—Ü–µ –µ—Å—Ç—å –Ω–µ–≥–ª—É–±–æ–∫–∏–µ –º–∏–º–∏—á–µ—Å–∫–∏–µ –º–æ—Ä—â–∏–Ω—ã.\n\nD) –î–∞, –Ω–∞ –º–æ—ë–º –ª–∏—Ü–µ –µ—Å—Ç—å –≥–ª—É–±–æ–∫–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –º–æ—Ä—â–∏–Ω—ã.",
                                  reply_markup=kb.response_4_options)
    await state.set_state(SkinTypeTest.question_10)

# [SUB] –í–æ–ø—Ä–æ—Å 11:
@router.callback_query(SkinTypeTest.question_10)
async def handle_question_10(callback: CallbackQuery, state: FSMContext):
    await state.update_data(answer_10=callback.data)
    await callback.message.answer("–í–æ–ø—Ä–æ—Å 11: –ó–∞–º–µ—Ç–Ω—ã –ª–∏ –Ω–∞ –≤–∞—à–µ–º –ª–∏—Ü–µ –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è –∏–ª–∏ —Ç–æ–Ω–∫–∞—è —Å–æ—Å—É–¥–∏—Å—Ç–∞—è —Å–µ—Ç–æ—á–∫–∞ –Ω–∞ —â–µ–∫–∞—Ö, –∫—Ä—ã–ª—å—è—Ö –Ω–æ—Å–∞, —Å–∫—É–ª–∞—Ö?\n\nA) –ù–µ—Ç, —É –º–µ–Ω—è –Ω–µ—Ç —Ç–∞–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã.\n\nB) –î–∞, —É –º–µ–Ω—è –µ—Å—Ç—å –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è –Ω–∞ –ª–∏—Ü–µ.",
                                  reply_markup=kb.response_2_options)
    await state.set_state(SkinTypeTest.question_11)

# [SUB] –í–æ–ø—Ä–æ—Å 12:
@router.callback_query(SkinTypeTest.question_11)
async def handle_question_11(callback: CallbackQuery, state: FSMContext):
    await state.update_data(answer_11=callback.data)
    await callback.message.answer("–í–æ–ø—Ä–æ—Å 12: –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–ª–µ–¥—ã –Ω–µ–¥–æ—Å—ã–ø–∞ –∏–ª–∏ –æ—Ç–µ—á–Ω–æ—Å—Ç–µ–π –ø–æ —É—Ç—Ä–∞–º?\n\nA) –ù–µ—Ç.\n\nB) –î–∞, –µ—Å—Ç—å.",
                                  reply_markup=kb.response_2_options)
    await state.set_state(SkinTypeTest.question_12)

# [SUB] –í–æ–ø—Ä–æ—Å 13:
@router.callback_query(SkinTypeTest.question_12)
async def handle_question_12(callback: CallbackQuery, state: FSMContext):
    await state.update_data(answer_12=callback.data)
    await callback.message.answer("–í–æ–ø—Ä–æ—Å 13: –í—ã –±–µ—Ä–µ–º–µ–Ω–Ω—ã –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å?\n\nA) –ù–µ—Ç.\n\nB) –î–∞, —è –±–µ—Ä–µ–º–µ–Ω–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.\n\nC) –î–∞, —è –ø–ª–∞–Ω–∏—Ä—É—é –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏.",
                                  reply_markup=kb.response_3_options)
    await state.set_state(SkinTypeTest.question_13)

# [SUB] –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞:
@router.callback_query(SkinTypeTest.question_13)
async def handle_question_3(callback: CallbackQuery, state: FSMContext):
    await state.update_data(answer_13=callback.data)
    await state.set_state(SkinTypeTest.calculating_result)
                                  
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    skin_type, features, risks = await determine_skin_type(user_data)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–¥
    await rq.upsert_user(tg_id=callback.from_user.id,
                         skin_type=skin_type,
                         features=features,
                         risks=risks
                         )
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    response_text = (
        f"–¢–∏–ø –≤–∞—à–µ–π –∫–æ–∂–∏: {skin_type}\n\n"
        f"–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –∫–æ–∂–∏: {', '.join(features)}\n\n"
        f"–†–∏—Å–∫–∏ –¥–ª—è –≤–∞—à–µ–π –∫–æ–∂–∏: {', '.join(risks) if risks else '–†–∏—Å–∫–æ–≤ –¥–ª—è –≤–∞—à–µ–π –∫–æ–∂–∏ –Ω–µ—Ç'}"
    )

    await callback.message.answer(f"C–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:\n\n"
                                  f"{response_text}\n\n"
                                  f"–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—ã —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–µ—Å—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ª–µ–≥–∫–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤ –¥–æ–º–∞—à–Ω–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö.",
                                  reply_markup=kb.response_skin_test)
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–∏ "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" -> "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ç–∏–ø –∫–æ–∂–∏" -> "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–æ–∂–∏"
@router.callback_query(lambda c: c.data == "show_skin_test")
async def show_skin_test(callback: CallbackQuery):
    await callback.message.answer(f'–ß—Ç–æ–±—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–æ–∂–∏, –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –Ω–µ—Å–ª–æ–∂–Ω—ã–π —Ç–µ—Å—Ç:\n\t1. –ù–∞—á–Ω–∏—Ç–µ —Å –æ—á–∏—â–µ–Ω–∏—è –∫–æ–∂–∏. –£–º–æ–π—Ç–µ—Å—å –≤–∞—à–∏–º –ø—Ä–∏–≤—ã—á–Ω—ã–º –≥–µ–ª–µ–º –∏–ª–∏ –ø–µ–Ω–∫–æ–π –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∫–∞–∫–∏–µ —É–≤–ª–∞–∂–Ω—è—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.\n\t2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ 30-40 –º–∏–Ω—É—Ç, –ø–æ–∫–∞ —Å–∞–ª—å–Ω—ã–µ –∂–µ–ª–µ–∑—ã –Ω–µ –Ω–∞—á–Ω—É—Ç –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–∂–Ω—ã–π –∂–∏—Ä\n\t3. –ü—Ä–∏–ª–æ–∂–∏—Ç–µ –∫ –¢-–∑–æ–Ω–µ –∏ —â–µ–∫–∞–º –ø–∞–ø–∏—Ä–æ—Å–Ω—É—é –±—É–º–∞–≥—É –∏–ª–∏ —Å–∞–ª—Ñ–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∂–∏—Ä–Ω–æ–≥–æ –±–ª–µ—Å–∫–∞. –ü–æ–¥–µ—Ä–∂–∏—Ç–µ –∏—Ö –ø—Ä–∏–º–µ—Ä–Ω–æ –¥–≤–µ –º–∏–Ω—É—Ç—ã.\n\n–ì–æ—Ç–æ–≤—ã –æ—Ü–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?\n\t1. –ï—Å–ª–∏ –≤—Å–µ —É—á–∞—Å—Ç–∫–∏ –∫–æ–∂–∏ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ–±–∏–ª—å–Ω—ã–π –∂–∏—Ä–Ω—ã–π —Å–ª–µ–¥ ‚Äì –≤–µ—Ä–æ—è—Ç–Ω–æ, —É –≤–∞—Å –∂–∏—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–∂–∏.\n\t2. –°–ª–µ–¥ –æ—Å—Ç–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –±—É–º–∞–≥–µ, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–π –≤ –¢-–∑–æ–Ω–µ? –í–∞—à–∞ –∫–æ–∂–∞, —Å–∫–æ—Ä–µ–π –≤—Å–µ–≥–æ, –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è.\n\t3. –ï—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ —Å–ª–µ–¥—ã –Ω–∞ –≤—Å–µ—Ö –∫—É—Å–æ—á–∫–∞—Ö –±—É–º–∞–≥–∏, –Ω–æ –æ–Ω–∏ –Ω–µ —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ, —Ç–æ —É –≤–∞—Å –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –∫–æ–∂–∞.\n\t4. –ï—Å–ª–∏ –Ω–∞ —Å–∞–ª—Ñ–µ—Ç–∫–µ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö —Å–ª–µ–¥–æ–≤ - –∫–æ–∂–∞ —Å—É—Ö–∞—è.\n\n–¢–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∫–æ–∂–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–∂–Ω–æ. –ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—á—ë—Ç –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –í–∞—à–µ–π –∫–æ–∂–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.\n\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: https://www.loreal-paris.ru/blog/kak-opredelit-tip-kozhi-lica')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–∏ "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" -> "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
@router.callback_query(lambda c: c.data == "get_recommendations")
async def get_recommendations(callback: CallbackQuery):
    await callback.message.answer("–í–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –≤–∞—à–∏–º —Ç–∏–ø–æ–º –∫–æ–∂–∏, —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –µ—ë –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
    """
    (–º–µ—Å—Ç–æ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞)
    ...
    """
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–∏ "–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤"
@router.message(lambda message: message.text == "–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤")
async def analysis_history(message: Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø—Ü–∏–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
@router.message(lambda message: message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: Message):
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb.settings_menu)


# [HELP] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –æ–ø—Ü–∏—è–º–∏
@router.message(F.text)
async def handle_other_commands(message: Message, state: FSMContext):
    await state.clear()
    if message.text == "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
        await personal_rec(message)
    elif message.text == "–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤":
        await analysis_history(message)
    elif message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        await settings(message)
    else: 
        return False
    
    return True

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command('help')) 
async def get_help(message: Message):
    await message.answer("–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /help")